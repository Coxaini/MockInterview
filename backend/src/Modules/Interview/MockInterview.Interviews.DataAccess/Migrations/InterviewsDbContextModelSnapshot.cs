// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MockInterview.Interviews.DataAccess;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace MockInterview.Interviews.DataAccess.Migrations
{
    [DbContext(typeof(InterviewsDbContext))]
    partial class InterviewsDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("interviews")
                .HasAnnotation("ProductVersion", "7.0.15")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.Interview", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("Tags")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.ToTable("Interviews", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewMember", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("InterviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InterviewOrderId")
                        .HasColumnType("uuid");

                    b.HasKey("UserId", "InterviewId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("InterviewOrderId");

                    b.ToTable("InterviewMembers", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewOrder", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("CandidateId")
                        .HasColumnType("uuid");

                    b.Property<string>("ProgrammingLanguage")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<DateTime>("StartDateTime")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string[]>("Technologies")
                        .IsRequired()
                        .HasColumnType("text[]");

                    b.HasKey("Id");

                    b.HasIndex("CandidateId");

                    b.ToTable("InterviewOrders", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewQuestion", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("timestamp with time zone");

                    b.Property<int>("DifficultyLevel")
                        .HasColumnType("integer");

                    b.Property<string>("Feedback")
                        .HasColumnType("text");

                    b.Property<Guid>("InterviewQuestionsListId")
                        .HasColumnType("uuid");

                    b.Property<int>("OrderIndex")
                        .HasColumnType("integer");

                    b.Property<int?>("Rating")
                        .HasColumnType("integer");

                    b.Property<string>("Tag")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Text")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("InterviewQuestionsListId");

                    b.ToTable("InterviewQuestions", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewQuestionsList", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid>("AuthorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InterviewId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("InterviewOrderId")
                        .HasColumnType("uuid");

                    b.Property<bool>("IsFeedbackSent")
                        .HasColumnType("boolean");

                    b.HasKey("Id");

                    b.HasIndex("AuthorId");

                    b.HasIndex("InterviewId");

                    b.HasIndex("InterviewOrderId")
                        .IsUnique();

                    b.ToTable("InterviewQuestionsLists", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.User", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<string>("AvatarUrl")
                        .HasColumnType("text");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users", "interviews");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewMember", b =>
                {
                    b.HasOne("MockInterview.Interviews.Domain.Entities.Interview", "Interview")
                        .WithMany("Members")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockInterview.Interviews.Domain.Entities.InterviewOrder", "InterviewOrder")
                        .WithMany()
                        .HasForeignKey("InterviewOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MockInterview.Interviews.Domain.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Interview");

                    b.Navigation("InterviewOrder");

                    b.Navigation("User");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewOrder", b =>
                {
                    b.HasOne("MockInterview.Interviews.Domain.Entities.User", "Candidate")
                        .WithMany()
                        .HasForeignKey("CandidateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Candidate");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewQuestion", b =>
                {
                    b.HasOne("MockInterview.Interviews.Domain.Entities.InterviewQuestionsList", "InterviewQuestionsList")
                        .WithMany("Questions")
                        .HasForeignKey("InterviewQuestionsListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("InterviewQuestionsList");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewQuestionsList", b =>
                {
                    b.HasOne("MockInterview.Interviews.Domain.Entities.User", "Author")
                        .WithMany()
                        .HasForeignKey("AuthorId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("MockInterview.Interviews.Domain.Entities.Interview", "Interview")
                        .WithMany("QuestionsLists")
                        .HasForeignKey("InterviewId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("MockInterview.Interviews.Domain.Entities.InterviewOrder", "InterviewOrder")
                        .WithOne("QuestionsList")
                        .HasForeignKey("MockInterview.Interviews.Domain.Entities.InterviewQuestionsList", "InterviewOrderId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.Navigation("Author");

                    b.Navigation("Interview");

                    b.Navigation("InterviewOrder");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.Interview", b =>
                {
                    b.Navigation("Members");

                    b.Navigation("QuestionsLists");
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewOrder", b =>
                {
                    b.Navigation("QuestionsList")
                        .IsRequired();
                });

            modelBuilder.Entity("MockInterview.Interviews.Domain.Entities.InterviewQuestionsList", b =>
                {
                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
